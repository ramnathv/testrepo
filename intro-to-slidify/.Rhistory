? renderMarkdown
library(markdown)
? renderMarkdown
renderMarkdown(text = '# hEader')
(renderMarkdown(text = '# hEader'))
getOption('markdown.extensions')
(renderMarkdown(text = '# hEader', renderer.options = 'toc'))
(renderMarkdown(text = '# hEader\n this is okay', renderer.options = 'toc'))
cat(renderMarkdown(text = '# hEader\n this is okay', renderer.options = 'toc'))
cat(renderMarkdown(text = '# hEader\n this is okay\n ## subheader', renderer.options = 'toc'))
cat(renderMarkdown(text = '# hEader\n this is okay\n## subheader', renderer.options = 'toc'))
help(package = 'NCStats')
n <- 20
# Color Wheels
pie(rep(1,n), col=chooseColors("rich",n))
library(NCStats)
n <- 20
# Color Wheels
pie(rep(1,n), col=chooseColors("rich",n))
op <- par(mfrow=c(2,2),mar=c(3.5,1,3.5,1),mgp=c(2,0.75,0))
distrib(46,"binom","d",size=100,prob=0.5)
op <- par(mfrow=c(2,2),mar=c(3.5,1,3.5,1),mgp=c(2,0.75,0))
distrib(46,"binom","d",size=100,prob=0.5)
n <- 20
# Color Wheels
pie(rep(1,n), col=chooseColors("rich",n))
distrib(46,"binom","d",size=100,prob=0.5)
expandTable(HairEyeColor)
? percTable
Aye <- sample(c("Yes", "Si", "Oui"), 177, replace = TRUE)
Bee <- sample(c("Hum", "Buzz"), 177, replace = TRUE)
( A <- table(Aye, Bee) )
## what prop.table() would look like
prop.table(A,margin=1)
# row percentages
percTable(A,margin=1)
qplot(table(mtcars$cyl))
barchart(table(mtcars$cyl))
qplot(cyl, data = mtcars)
data(package = 'openintro')
head(cars)
head(mammals)
data(mammals)
? mammals
library(openintro)
data(mammals)
? cars
head(cars)
qplot(type, data = mtcars)
qplot(type, data = cars)
qplot(type, data = cars, fill = I('steelblue'))
x = sample(10, 5)
c1 = x
c2 = paste(x, '-', mean(x), '=', x - mean(x), sep = "")
c2
c2 = paste(x, '-', mean(x), '=', x - mean(x), sep = " ")
c2
? format
format(c2, width = 14)
format(c2, width = 15)
stringr::str_pad(c2)
stringr::str_pad(c2, 14)
stringr::str_pad(c2, 15)
stringr::str_pad(c2, 13)
stringr::str_pad(c2, 14)
stringr::str_pad(c2, 15)
sample(10:20, 5)
source('~/.active-rstudio-document')
show_sd_calc(sample(10:20, 5))
options(width = 78)
show_sd_calc(sample(10:20, 5))
df1 = show_sd_calc(sample(10:20, 5))
xtable(df1)
library(xtable)
options(xtable.type = 'html')
xtable(df1)
source('~/.active-rstudio-document')
df1 = show_sd_calc(sample(10:20, 5))
xtable(df1)
df1
sprintf('$%s$', df1)
sprintf('$%s$', df1[,1])
apply(df1, 2, function(y) paste0('$', y, '$'))
? sprintf
source('~/.active-rstudio-document')
show_sd_calc(sample(10:20, 5))
xtable(show_sd_calc(sample(10:20, 5)))
options(digits = 2)
xtable(show_sd_calc(sample(10:20, 5)))
? gvisPieChart
require(googleVis)
? gvisPieChart
pie1 <- gvisPieChart(CityPopularity)
print(pie1, 'chart')
help(package = 'tumblr')
library(httr)
help(package = 'httr')
demos(package = 'httr')
demo(package = 'httr')
demo('oauth2-github', package = 'httr')
github
demo('gist', package = 'httr')
library(stringr)
demo('gist', package = 'httr')
head(gist)
length(gist)
gist[[1]]
gist[[2]]
str(gist)
class(gist)
library(httr)
tumblr <- oauth_endpoint('request_token', 'authorize', 'access_token',
base_url = 'http://www.tumblr.com/oauth')
tumblr
GET('http://api.tumblr.com/v2/blog/david.tumblr.com/avatar/512')
mykey  <- 'Zj5xPnI2yihei3aNBGHSSfN7yOglaKnPFcF7IxLQ0IlcQbuih1'
secret <- 'pm32mRbWKCnNTUmgEcbwKDxiItEqVqWRHWiDd0cd6d6oV9xpuM'
myapp <- oauth_app('tumblr', mykey, secret)
tumblr_token <- oauth1.0_token(tumblr, myapp)
tumblr_token <- oauth2.0_token(tumblr, myapp)
oauth2.0_token
oauth1.0_token
httr:::oauth2.0_token
oauth2.0_token
tumblr_token <- httr:::oauth2.0_token(tumblr, myapp)
install.packages('Rook')
tumblr_token <- httr:::oauth2.0_token(tumblr, myapp)
tumblr_token <- oauth1.0_token(tumblr, myapp)
tumblr_token <- httr:::oauth2.0_token(tumblr, myapp)
tumblr_token$access_token
myapp <- oauth_app('test', mykey, secret)
tumblr_token <- httr:::oauth2.0_token(tumblr, myapp)
tumblr_token <- oauth1.0_token(tumblr, myapp)
tumblr_token <- httr:::oauth2.0_token(tumblr, myapp)
tumblr_sig <- sign_ouath2.0(tumblr_token$access_token)
tumblr_sig <- httr:::sign_ouath2.0(tumblr_token$access_token)
x <- GET('api.tumblr.com/v2/blog/rstats.tumblr.com/info?Zj5xPnI2yihei3aNBGHSSfN7yOglaKnPFcF7IxLQ0IlcQbuih1')
x <- GET('http://api.tumblr.com/v2/blog/rstats.tumblr.com/info?Zj5xPnI2yihei3aNBGHSSfN7yOglaKnPFcF7IxLQ0IlcQbuih1')
help(package = 'httr')
y <- parsed_content(x)
str(y)
x <- GET('http://api.tumblr.com/v2/blog/rstats.tumblr.com/info?Zj5xPnI2yihei3aNBGHSSfN7yOglaKnPFcF7IxLQ0IlcQbuih1', tumblr_token)
x <- GET('http://api.tumblr.com/v2/blog/rstats.tumblr.com/info?Zj5xPnI2yihei3aNBGHSSfN7yOglaKnPFcF7IxLQ0IlcQbuih1', tumblr_sig)
tumblr_token <- httr:::oauth2.0_token(tumblr, myapp)
myapp <- oauth_app('Test', mykey, secret)
tumblr_token <- oauth1.0_token(tumblr, myapp)
str(myapp)
tumblr_token <- httr:::oauth2.0_token(tumblr, myapp)
x = sample(20:40, 10)
x
cut(x, 5)
table(cut(x, 5))
t(table(cut(x, 5)))
table(cut(x, 5))
x
x = mtcars$mpg
x
breaks = cut(x, 5)
breaks
breaks$levels
levels(breaks)
unlist(levels(breaks))
data_dir = '~/Dropbox/01 Work/07 Teaching/01 MGCR 271/Winter_2012/data/moore/'
callcenter = file.path(data_dir, 'callcenter.txt')
df = read.csv(callcenter)
df
head9df
head(df)
histogram(~ length, data = df)
qplot(length, data = df)
qplot(length, data = df, binwidth = I(10))
qplot(length, data = df, binwidth = I(10), xlim = c(0, 1200))
qplot(length, data = df, binwidth = I(10), xlim = c(0, 1200), fill = I('gray80'))
qplot(length, data = df, binwidth = I(10), xlim = c(0, 1200), fill = I('gray80'), color = I('black'))
qplot(length, data = df, binwidth = I(10), xlim = c(0, 1200), fill = I('gray80'), color = I('gray'))
qplot(length, data = df, binwidth = I(100), xlim = c(0, 1200), fill = I('gray80'), color = I('gray'))
d1 = qplot(length, data = df, binwidth = I(100), xlim = c(0, 1200), fill = I('gray80'), color = I('gray'))
d2 = qplot(length, data = df, binwidth = I(10), xlim = c(0, 1200), fill = I('gray80'), color = I('gray'))
library(gridExtra)
grid.arrange(d1, d2)
grid.arrange(d1, d2, nrow = 1)
update.packages()
oil_wells = file.path(data_dir, 'oilwells.txt')
oil_wells = read.csv(file.path(data_dir, 'oilwells.txt'))
head(oil_wells)
oil
oil_wells$oil
cat(oil_wells)
cat(oil_wells$oil)
library(lattice)
library(latticeExtra)
asTheEconomist(histogram(~ oil, data = oil_well))
asTheEconomist(histogram(~ oil, data = oil_wells))
library(mosaic)
favstats(~ oil, data = oil_wells)
asTheEconomist(bwplot(~ oil, data = oil_wells))
asTheEconomist(bwplot(~ oil, data = oil_wells, xlab = 'Total Oil Recovered (Estimated)'))
asTheEconomist(bwplot(~ oil, data = oil_wells, ylab = 'Total Oil Recovered (Estimated)'))
asTheEconomist(bwplot(~ oil, data = oil_wells), ylab = 'Total Oil Recovered (Estimated)'))
asTheEconomist(bwplot(~ oil, data = oil_wells), xlab = 'Total Oil Recovered (Estimated)')
b1 = asTheEconomist(bwplot(~ oil, data = oil_wells), xlab = 'Total Oil Recovered (Estimated)')
b2 = asTheEconomist(histogram(~ oil, data = oil_wells))
grid.arrange(b1, b2)
grid.arrange(b1, b2, nrow = 1)
grid.arrange(b1, b2, nrow = 2)
update.packages()
addmargins(HairEyeColor[,,1])
library(devtools)
install_github('slidify', 'ramnathv')
update.packages()
help(package = 'mosaic')
head(Drinking)
data(Drinking)
library(mosaic)
head(Drinking)
qplot(Gender, Cheat, data = Drinking)
qplot(Gender, Alcohol, data = Drinking)
qplot(Gender, Alcohol, data = Drinking, geom = 'boxplot')
qplot(Gender, Alcohol, data = Drinking, geom = 'boxplot') + coord_flip()
update.packages()
? file.info
file.access(dir('.'))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
qplot(wt, mpg, data = mtcars, color = gear) + scale_color_manual(values = cbPalette)
qplot(wt, mpg, data = mtcars, color = factor(gear)) + scale_color_manual(values = cbPalette)
qplot(wt, mpg, data = mtcars, color = factor(gear)) +
qplot(wt, mpg, data = mtcars, color = factor(gear))
qplot(wt, mpg, data = mtcars, color = factor(gear)) + scale_color_hue(l = 2)
qplot(wt, mpg, data = mtcars, color = factor(gear)) + scale_color_hue(l = 40)
qplot(wt, mpg, data = mtcars, color = factor(gear)) + scale_color_hue(l = 100)
qplot(wt, mpg, data = mtcars, color = factor(gear)) + scale_color_hue(l = 30)
qplot(wt, mpg, data = mtcars, color = factor(gear)) + scale_color_hue(l = 10)
qplot(wt, mpg, data = mtcars, color = factor(gear)) + scale_color_hue(l = 45)
library(markdown)
markdown
renderMarkdown
markdownToHTML
markdown:::.b64EncodeImages
source('~/.active-rstudio-document')
m
slidify:::re.capture(reg, html)
slidify:::re.capture(reg, '<img src = "x">')
source('~/.active-rstudio-document')
slidify:::re.capture(reg, '<img src = "x">')
source('~/.active-rstudio-document')
m <- gregexpr(reg,html,perl=TRUE)
m
markdown:::.b64EncodeImages
source('~/.active-rstudio-document')
slidify:::re.capture(reg, '<img src = "x">')
m <- gregexpr(reg,html,perl=TRUE)
m
m[[1]]
source('~/.active-rstudio-document')
slidify:::re.capture(reg, '<img src = "x">')
source('~/.active-rstudio-document')
rex = list(src = string, names  = list(),
result = regexpr(pattern, string, perl = TRUE, ...))
rex = list(src = string, names  = list(),
result = regexpr(pattern, string, perl = TRUE))
rex
attr(rex$result, 'capture.name')
source('~/.active-rstudio-document')
pattern
rex = list(src = string, names  = list(),
result = regexpr(pattern, string, perl = TRUE))
attr(rex$result, 'capture.name')
source('~/.active-rstudio-document')
rex = list(src = string, names  = list(),
result = regexpr(pattern, string, perl = TRUE))
rex
html = '<img src = "new.jpg">'
reg <- "(?<imgnode>\<\\s*[Ii][Mm][Gg]\\s+[Ss][Rr][Cc]\\s*=\\s*(?<img>[\"']([^\"']+)[\"']).*$)"
m <- gregexpr(reg,html,perl=TRUE)
pattern = "(?<imgnode>\\<\\s*[Ii][Mm][Gg]\\s+[Ss][Rr][Cc]\\s*=\\s*(?<img>[\"']([^\"']+)[\"'])(?<rest>.*$))"
string = '<img src = "new.jpg">'
? Filter
re.capture <- function(pattern, string, ...) {
rex = list(src = string, names  = list(),
result = regexpr(pattern, string, perl = TRUE, ...))
names = Filter(function(x) x != "", attr(rex$result, 'capture.name'))
for (.name in attr(rex$result, 'capture.name')) {
rex$names[[.name]] = substr(rex$src,
attr(rex$result, 'capture.start')[,.name],
attr(rex$result, 'capture.start')[,.name]
+ attr(rex$result, 'capture.length')[,.name]
- 1)
}
return(rex)
}
re.capture(pattern, string)
re.capture <- function(pattern, string, ...) {
rex = list(src = string, names  = list(),
result = regexpr(pattern, string, perl = TRUE), ...)
.names = Filter(function(x) x != "", attr(rex$result, 'capture.name'))
for (.name in .names) {
rex$names[[.name]] = substr(rex$src,
attr(rex$result, 'capture.start')[,.name],
attr(rex$result, 'capture.start')[,.name]
+ attr(rex$result, 'capture.length')[,.name]
- 1)
}
return(rex)
}
re.capture(pattern, string)
re.capture(pattern, string)$name
re.capture(pattern, string)$name$img
pattern = "(?<imgnode><\\s*[Ii][Mm][Gg]\\s+[Ss][Rr][Cc]\\s*=\\s*(?<img>[\"']([^\"']+)[\"']).*$)"
string = '<img src = "new.jpg">'
re.capture(pattern, string)$name$img
string = '<img width = "200px" src = "new.jpg">'
re.capture(pattern, string)$name$img
string = '<img src = "new.jpg" width = "200px">'
re.capture(pattern, string)$name$img
library(devtools)
install_github('markdown', 'rstudio')
setwd("~/Desktop/R_Projects/talks/intro-to-slidify")
slidify('test.Rmd')
library(slidify)
slidify('test.Rmd')
system('open test.html')
slidify('test.Rmd')
slidify('test.Rmd', options = list(embed = T))
? Cairo_PNG
? Cairo_png
? Cairo
? cairo
? dev
? CairoPNG
library(Cairo)
? CairoPNG
slidify('test.Rmd', options = list(embed = T))
markdown:::.MIMEMAP[['svg']]
gray(seq(0,1,len=50))
slidify('index.Rmd', options = list(theme = 'layout-widescreen template-default'))
slidify('test.Rmd')
