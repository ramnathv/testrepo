1.645*3.8/sqrt(49)
1.645*3.8/sqrt(49) + 23.5
23.5 + 1.645*3.8/sqrt(49)
z = (24.393 - 24)/(3.8/sqrt(49))
z
pnorm(0.72)
x <- rbinom(100, 1)
x <- rbinom(n=100, size = 2, prob = c(0.5, 0.5))
x
rle(x)
plot(rle(x))
plot(rle(x)$lengths)
d <- rle(x)$lengths
qplot(d)
x <- rbinom(n=100, size = 2, prob = c(0.5, 0.5))
qplot(d)
d <- rle(x)$lengths
qplot(d)
d
qplot(d, geom = 'density')
qplot(d, geom = 'histdensity')
qplot(d, geom = 'histdot')
qplot(d, geom = 'dothist')
histogram(~d)
? histogram
histogram(~d, type = "percent")
histogram(~d, type = "density")
histogram(~d, type = "percent")
table(x)
x
table(rle(x))
x <- rbinom(n=100, size = 1, prob = c(0.5, 0.5))
x
table(rle(x))
d <- rle(x)$length
d
x
qplot(d)
x <- rbinom(40, 1, c(0.5, 0.5))
qplot(rle(x)$length)
qplot(rle(x)$length/40)
qplot(rle(x)$length/)
qplot(rle(x)$length)
histogram(~ rle(x)$length, type = 'percent')
x <- rbinom(40, 1, c(0.5, 0.5))
histogram(~ rle(x)$length, type = 'percent')
x <- rbinom(40, 1, c(0.5, 0.5))
histogram(~ rle(x)$length, type = 'percent')
x <- rbinom(40, 1, c(0.5, 0.5))
histogram(~ rle(x)$length, type = 'percent')
x <- rbinom(40, 1, c(0.5, 0.5))
histogram(~ rle(x)$length, type = 'percent')
x <- rbinom(40, 1, c(0.5, 0.5))
histogram(~ rle(x)$length, type = 'percent')
x <- rbinom(40, 1, c(0.5, 0.5))
histogram(~ rle(x)$length, type = 'percent')
x <- rbinom(40, 1, c(0.5, 0.5))
histogram(~ rle(x)$length, type = 'percent')
library(plyr)
str(mtcars)
library(reshape2)
library(MASS)
head(survey)
head10 <- head(survey, 10)
? survey
load("/Users/ramnathvaidyanathan/Downloads/drinking.RData")
head(data)
head10 <- head(data, 10)
head10
subset(head10, Alcohol > 15)
subset(head10, Alcohol >= 15)
library(plyr)
arrange(head10, Height)
arrange(head10, -Height)
arrange(head, Gender, Cheat)
arrange(data, Gender, Cheat)
? Find
subset(data, Cheat == 1)
dat1 <- subset(data, Cheat == 1)
dat1 <- subset(data, Cheat == 1 && Gender == 'Male')
dat1
dat1 <- subset(data, Cheat == 1 & Gender == 'Male')
dat1
tab <- table(data$Cheat)
head(tab)
prop.table(tab)
? prop.table
prop.table(data$Cheat)
prop.table(data$Cheat, 2)
prop.table(data$Cheat, 1)
prop.table(data$Cheat)
pie(prop.table(tab))
tab
tab/sum(tab)
opt <- c(align = 'center', alt = 'cap')
names(opt)
opt
sprintf(":%s: %s", names(opt), opt)
? mtcars
x <- matrix(1, 5, 5)
x
rownames(x) <- 1:5
x
colnames(x) <- LETTERS[1:5]
X
x
x <- ""
x
x <- as.matrix(rep("", 25), 5, 5)
x
x <- as.matrix(rep("", 25), NROW = 5, NCOL = 5)
x
x <- as.data.frame(rep("", 25), NROW = 5, NCOL = 5)
x
plot(1:10, 1:10)
setwd('~/Desktop/Sindbad')
library(googleVis)
? gvisPieChart
? install_github
library(devtools)
? install_github
help(package = 'slidify')
library(markdown)
? markdownToHTML
library(httr)#
github <- oauth_endpoint(NULL, "authorize", "access_token", #
	base_url = "https://github.com/login/oauth")#
# 2. Register an application at https://github.com/settings/applications#
#    Insert your values below - if secret is omitted, it will look it up in#
#    the GITHUB_CONSUMER_SECRET environmental variable.#
##
#    Use http://localhost:1410 as the callback url#
myapp <- oauth_app("slidify", 'a78b748f806caac0a066',  #
	'ee5cf3bfeda3fbb391b0fc872b19837cbe7bbc40')#
#
# 3. Get OAuth credentials#
github_token <- httr:::oauth2.0_token(github, myapp)
github_sig <- sign_oauth2.0(github_token$access_token)
GET("https://api.github.com/ramnathv/followers", github_sig)
GET("https://api.github.com/user/followers", github_sig)
x = GET("https://api.github.com/user/repos", github_sig)
parsed_content(x)
as.data.frame(parsed_content(x))
parsed_content(x)[[1]]
? POST
? GET
POST('https://api.github.com/user/repos/test')
POST('https://api.github.com/user/repos', github_sig, 'test')
github_sig
? oauth_sig
POST('https://api.github.com/user/repos', github_sig, params = list(name = 'new_repo'))
POST('https://api.github.com/user/repos', github_sig, params = "{'name':'new_repo')")
POST('https://api.github.com/user/repos', github_sig, scheme = "{'name':'new_repo')")
POST('https://api.github.com/user/repos', github_sig, query = "{'name':'new_repo')")
POST('https://api.github.com/user/repos', github_sig, scope = "{'name':'new_repo')")
POST('https://api.github.com/user/repos', github_sig, body = list(name = 'newrepo'))
? POST
? new_bin
? POST
POST('https://api.github.com/user/repos', github_sig, params = "{'name':'new_repo'}")
POST('https://api.github.com/user/repos', github_sig, body = "{'name':'new_repo'}")
POST('https://api.github.com/user/repos', github_sig, handle = "{'name':'new_repo'}")
POST('https://api.github.com/user/repos', github_sig, body = "{'name':'new_repo'}")
POST('https://api.github.com/user/repos', github_sig, query = "{'name':'new_repo'}")
POST('https://api.github.com/user/repos', github_sig, params = "{'name':'new_repo'}")
POST('https://api.github.com/user/repos?name="new_repo"', github_sig)
POST('https://api.github.com/user/repos', github_sig)
POST('https://api.github.com/user/repos', github_sig, body = list(name = 'newrepo'))
POST('https://api.github.com/user/repos', github_sig, params = list(name = 'newrepo'))
POST('https://api.github.com/user/repos', github_sig, params = list('name' = 'newrepo'))
POST('https://api.github.com/user/repos', github_sig, params = {'name' : 'newrepo"))
POST('https://api.github.com/user/repos', github_sig, params = {"name" : 'newrepo"})
POST('https://api.github.com/user/repos', github_sig, params = {"name" : "newrepo"})
GET('https://api.github.com/users/ramnathv/repos')
GET('https://api.github.com/users/hadley/repos')
GET('https://api.github.com/user/repos')
GET('https://api.github.com/user/repos', github_sig)
? oauth_sign
github_token <- httr:::oauth2.0_token(github, myapp, scope = '{"name":"newrepo"}')#
github_sig <- sign_oauth2.0(github_token$access_token)
POST('https://api.github.com/user/repos', github_sig)
github_token
? sign_oauth2.0
? httr::sign_oauth2.0
help(package = 'httr')
? modify_url
? config
? httr
? github_sig
github_sig
class(github_sig)
str(github_sig)
library(RCurl)
? POST
POST('https://api.github.com/user/repos', github_sig, body = '{}')
POST('https://api.github.com/user/repos', github_sig, body = '{"name":"newrepo"}')
library(devtools)
install_github('knitr', 'yihui')
library(slidify)
setwd('~/Desktop/R_Projects/talks/intro-to-slidify/')
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
knit_theme$get()
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'moria'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'seashell'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'lucretia'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'ekvoli'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'web2.0', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'web-2.0', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'andes'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
slidify('deck.Rmd')
slidify('deck.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide', highlighter = 'highlight', histyle = 'bclear'))
github <- oauth_endpoint(NULL, "authorize", "access_token", #
	base_url = "https://github.com/login/oauth")#
# 2. Register an application at https://github.com/settings/applications#
#    Insert your values below - if secret is omitted, it will look it up in#
#    the GITHUB_CONSUMER_SECRET environmental variable.#
##
#    Use http://localhost:1410 as the callback url#
myapp <- oauth_app("slidify", 'a78b748f806caac0a066',  #
	'ee5cf3bfeda3fbb391b0fc872b19837cbe7bbc40')
install_github('httr')
library(httr)#
github <- oauth_endpoint(NULL, "authorize", "access_token", #
	base_url = "https://github.com/login/oauth")#
# 2. Register an application at https://github.com/settings/applications#
#    Insert your values below - if secret is omitted, it will look it up in#
#    the GITHUB_CONSUMER_SECRET environmental variable.#
##
#    Use http://localhost:1410 as the callback url#
myapp <- oauth_app("slidify", 'a78b748f806caac0a066',  #
	'ee5cf3bfeda3fbb391b0fc872b19837cbe7bbc40')
github_token <- httr:::oauth2.0_token(github, myapp, scope = '{"name":"newrepo"}')
github_sig <- sign_oauth2.0(github_token$access_token)
POST('https://api.github.com/user/repos', github_sig)
? oauth2.0_token
github_token
github_token <- httr:::oauth2.0_token(github, myapp, scope = 'user,repo')
github_sig <- sign_oauth2.0(github_token$access_token)
POST('https://api.github.com/user/repos', github_sig)
POST('https://api.github.com/user/repos', github_sig, body = '{"name":"newrepo"}')
? oauth2.0_token
? oauth_app
? oauth_app
create_repo <- function(body, appname, key, secret = NULL){#
	oauth_url <- "https://github.com/login/oauth"#
	gh_end <- oauth_endpoint(NULL, "authorize", "access_token", oauth_url)#
	gh_app <- oauth_app(appname, key)#
	gh_token <- oauth2.0_token(gh_end, gh_app, scope = 'user, repo')#
	gh_sig <- sign_oauth2.0(github_token$access_token)#
	POST('https://api.github.com/user/repos', body = body)#
}
create_repo('{"name":"newrepo"}', slidify, 'a78b748f806caac0a066',  #
	'ee5cf3bfeda3fbb391b0fc872b19837cbe7bbc40')
create_repo('{"name":"newrepo"}', 'slidify', 'a78b748f806caac0a066',  #
	'ee5cf3bfeda3fbb391b0fc872b19837cbe7bbc40')
create_repo <- function(body, appname, key, secret = NULL){#
	oauth_url <- "https://github.com/login/oauth"#
	gh_end <- oauth_endpoint(NULL, "authorize", "access_token", oauth_url)#
	gh_app <- oauth_app(appname, key, secret)#
	gh_token <- oauth2.0_token(gh_end, gh_app, scope = 'user, repo')#
	gh_sig <- sign_oauth2.0(github_token$access_token)#
	POST('https://api.github.com/user/repos', body = body)#
}
create_repo('{"name":"newrepo"}', 'slidify', 'a78b748f806caac0a066',  #
	'ee5cf3bfeda3fbb391b0fc872b19837cbe7bbc40')
create_repo('{"name":"newrepo"}', 'slidify', 'a78b748f806caac0a066',  #
	'ee5cf3bfeda3fbb391b0fc872b19837cbe7bbc40')
library(httr)
oauth2.0_token
help(package = 'httr')
? httr
